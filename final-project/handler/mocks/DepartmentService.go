// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "final-project/model"
)

// DepartmentService is an autogenerated mock type for the DepartmentService type
type DepartmentService struct {
	mock.Mock
}

// AddDepartment provides a mock function with given fields: ctx, m
func (_m *DepartmentService) AddDepartment(ctx context.Context, m model.Department) (*model.IDresponse, error) {
	ret := _m.Called(ctx, m)

	var r0 *model.IDresponse
	if rf, ok := ret.Get(0).(func(context.Context, model.Department) *model.IDresponse); ok {
		r0 = rf(ctx, m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.IDresponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Department) error); ok {
		r1 = rf(ctx, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddEmployeeToDepartment provides a mock function with given fields: ctx, departmentId, employeeId
func (_m *DepartmentService) AddEmployeeToDepartment(ctx context.Context, departmentId string, employeeId string) error {
	ret := _m.Called(ctx, departmentId, employeeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, departmentId, employeeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditDepartment provides a mock function with given fields: ctx, departmentId, m
func (_m *DepartmentService) EditDepartment(ctx context.Context, departmentId string, m model.Department) error {
	ret := _m.Called(ctx, departmentId, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Department) error); ok {
		r0 = rf(ctx, departmentId, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditHeadOfDepartment provides a mock function with given fields: ctx, departmentId, employeeId
func (_m *DepartmentService) EditHeadOfDepartment(ctx context.Context, departmentId string, employeeId string) error {
	ret := _m.Called(ctx, departmentId, employeeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, departmentId, employeeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDepartmentList provides a mock function with given fields: ctx
func (_m *DepartmentService) GetDepartmentList(ctx context.Context) (*[]model.Department, error) {
	ret := _m.Called(ctx)

	var r0 *[]model.Department
	if rf, ok := ret.Get(0).(func(context.Context) *[]model.Department); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Department)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDepartment provides a mock function with given fields: ctx, departmentId
func (_m *DepartmentService) RemoveDepartment(ctx context.Context, departmentId string) error {
	ret := _m.Called(ctx, departmentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, departmentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveEmloyeeFromDepartment provides a mock function with given fields: ctx, departmentId, employeeId
func (_m *DepartmentService) RemoveEmloyeeFromDepartment(ctx context.Context, departmentId string, employeeId string) error {
	ret := _m.Called(ctx, departmentId, employeeId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, departmentId, employeeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
